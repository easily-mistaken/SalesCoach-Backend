generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firstName       String?
  lastName        String?
  email           String?            @unique
  phone           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @updatedAt
  role            Role               @default(ADMIN)
  id              String             @id @default(uuid()) @db.Uuid
  callAssets      CallAsset[]
  organizations   UserOrganization[]
  isEmailVerified Boolean            @default(false)
  teamId          String[]           @db.Uuid
  team            Team[]
}

model Organization {
  name      String
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  id        String             @id @default(uuid()) @db.Uuid
  users     UserOrganization[]
  teams     Team[]
  invites   Invite[]
}

model UserOrganization {
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@id([userId, organizationId])
}

model Team {
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  id          String      @id @default(uuid()) @db.Uuid
  callAssets  CallAsset[]
  invites     Invite[]
  organizationId String @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  users         User[]
}

model CallAsset {
  content    String?
  type       String?
  date       DateTime?
  time       DateTime?
  status     Status    @default(PENDING)
  transcript String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  teamId     String    @db.Uuid
  team       Team      @relation(fields: [teamId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model Invite {
  id          String   @id @default(uuid()) @db.Uuid
  teamId      String   @db.Uuid
  role        Role
  email       String
  invitedBy   String   @db.Uuid
  timestamp   DateTime @default(now())
  status      Status   @default(PENDING)
  organizationId String @db.Uuid
  team   Team @relation(fields: [teamId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
}

enum Role {
  SALES_REP
  COACH
  MANAGER
  ADMIN
}

enum Status {
  PENDING
  SUCCESS
  FAIL
}
