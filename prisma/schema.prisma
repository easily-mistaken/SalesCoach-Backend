generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firstName       String?
  lastName        String?
  email           String?            @unique
  phone           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @updatedAt
  id              String             @id @default(uuid()) @db.Uuid
  callAssets      CallAsset[]
  organizations   UserOrganization[]
  isEmailVerified Boolean            @default(false)
  teamId          String[]           @db.Uuid
  team            Team[]
  invitesSent Invite[] @relation("UserInvites")
}

model Organization {
  name      String
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  id        String             @id @default(uuid()) @db.Uuid
  users     UserOrganization[]
  teams     Team[]
  invites   Invite[]
}

model UserOrganization {
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  role           Role

  @@id([userId, organizationId])
}

model Team {
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  id          String      @id @default(uuid()) @db.Uuid
  organizationId String @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id])
  users         User[]
  invites       Invite[] @relation("InviteTeams")
}

enum CallAssetType {
  FILE
  TEXT
}

model CallAsset {
  content    String
  type       CallAssetType
  name       String?
  date       DateTime?
  time       DateTime?
  status     Status    @default(PENDING)
  transcript String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
}

model Invite {
  id              String   @id @default(uuid()) @db.Uuid
  role            Role
  email           String
  invitedBy       String   @db.Uuid
  timestamp       DateTime @default(now())
  status          Status   @default(PENDING)
  organizationId  String   @db.Uuid
  organization    Organization @relation(fields: [organizationId], references: [id])
  invitedByUser   User     @relation(fields: [invitedBy], references: [id], name: "UserInvites")
  
  // Add the new field for team IDs
  teamIds         String[]  @db.Uuid // This is the UUID array for teams
  teams           Team[]    @relation("InviteTeams") // Relation to Team model
}

enum Role {
  SALES_REP
  COACH
  MANAGER
  ADMIN
}

enum Status {
  PENDING
  SUCCESS
  FAIL
}
