generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  firstName       String?
  lastName        String?
  email           String?            @unique
  phone           String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime?          @updatedAt
  id              String             @id @default(uuid()) @db.Uuid
  callAssets      CallAsset[]
  organizations   UserOrganization[]
  isEmailVerified Boolean            @default(false)
  invitesSent     Invite[]           @relation("UserInvites")
}

model Organization {
  name      String
  phone     String?
  address   String?
  city      String?
  state     String?
  zip       String?
  country   String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  id        String             @id @default(uuid()) @db.Uuid
  users     UserOrganization[]
  teams     Team[]
  invites   Invite[]
}

model UserOrganization {
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           Role
  teamAccess     UserOrganizationTeam[]

  @@id([userId, organizationId])
}

model Team {
  name           String
  description    String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  id             String                @id @default(uuid()) @db.Uuid
  organizationId String                @db.Uuid
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  members        UserOrganizationTeam[]
  invites        InviteTeam[]
}

// Properly defined join table for UserOrganization to Team
model UserOrganizationTeam {
  userId         String           @db.Uuid
  organizationId String           @db.Uuid
  teamId         String           @db.Uuid
  team           Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userOrg        UserOrganization @relation(fields: [userId, organizationId], references: [userId, organizationId], onDelete: Cascade)

  @@id([userId, organizationId, teamId])
}

enum CallAssetType {
  FILE
  TEXT
}

model CallAsset {
  content    String
  type       CallAssetType
  name       String?
  status     Status         @default(PENDING)
  transcript String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  id         String         @id @default(uuid()) @db.Uuid
  userId     String         @db.Uuid
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invite {
  id             String       @id @default(uuid()) @db.Uuid
  role           Role
  email          String
  invitedBy      String       @db.Uuid
  timestamp      DateTime     @default(now())
  status         Status       @default(PENDING)
  organizationId String       @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invitedByUser  User         @relation(fields: [invitedBy], references: [id], name: "UserInvites", onDelete: Cascade)
  teams          InviteTeam[]
}

// Join table for Invite to Team
model InviteTeam {
  inviteId String @db.Uuid
  teamId   String @db.Uuid
  invite   Invite @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  team     Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([inviteId, teamId])
}

enum Role {
  SALES_REP
  COACH
  MANAGER
  ADMIN
}

enum Status {
  PENDING
  SUCCESS
  FAIL
}